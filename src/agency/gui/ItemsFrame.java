/**
 * Item Legend is to view the supply details of each item. Items are categorized
 * in the tree.
 *
 */
package agency.gui;

import java.awt.ItemSelectable;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import agency.other.OtherController;
import agency.other.SearchTblsupplier;
import agency.other.ProgressRenderer;
import agency.persistance.controller.remote.ItemController;
import agency.persistance.controller.remote.ManufacturerController;
import agency.persistance.controller.remote.MetricController;
import agency.persistance.controller.remote.SupplyOrderDetailController;
import agency.persistance.factory.ControllerFactory;
import com.zegates.sanctus.services.remote.Category;
import com.zegates.sanctus.services.remote.Item;
import com.zegates.sanctus.services.remote.Manufacturer;
import com.zegates.sanctus.services.remote.Metric;
import com.zegates.sanctus.services.remote.SupplyOrderDetail;

/**
 *
 * @author Sandaruwan
 */
public class ItemsFrame extends javax.swing.JInternalFrame implements Observer {

    // Define Controllers
    private ItemController ijc;
    private ManufacturerController mjc;
    private SupplyOrderDetailController stjc;
    private MetricController mc;
    // DTM of the Updation Table
    private DefaultTableModel dtmItemDetails;
    private DefaultTableModel dtmItemLegend;
    // DTM of the Newly added items
    private DefaultTableModel dtmNewly;
    /**
     * Model of the item tree
     */
    private DefaultTreeModel modelTree;
    private boolean validated = true;
    private MainFrame mainFrame;
    private SearchTblsupplier searchTblsupplier;
    /**
     * Validates for progress bar action in the Legend Table
     */
    private boolean isProgressing = false;

    /**
     * Creates new form ItemsFrame
     */
    public ItemsFrame(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;
        searchTblsupplier = new SearchTblsupplier();
        ijc = ControllerFactory.getItemController();
        mjc = ControllerFactory.getManufacturerController();
        stjc = ControllerFactory.getSupplyOrderDetailController();
        mc = ControllerFactory.getMetricController();

        dtmItemDetails = (DefaultTableModel) tblItemDetails.getModel();
        dtmItemLegend = (DefaultTableModel) tblLegend.getModel();
        dtmNewly = (DefaultTableModel) tblNewly.getModel();
        modelTree = (DefaultTreeModel) itemTree.getModel();

        //setCriticalStock(1,2);

        TableColumn colDesc = tblLegend.getColumnModel().getColumn(7);
        colDesc.setCellRenderer(new ProgressRenderer());

        setTree();
        refreshFields();
        clearField();
        // Item Observer
        ijc.addObserver(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSearch = new javax.swing.ButtonGroup();
        btgSort = new javax.swing.ButtonGroup();
        tbpMain = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        btnAddConstruction = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNewly = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        cmbConstruction = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmbManufacturer = new javax.swing.JComboBox();
        btnAddManufacturer = new javax.swing.JButton();
        cmbCategory = new javax.swing.JComboBox();
        btnAddCategory = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jrbManufacture = new javax.swing.JRadioButton();
        jrbItemName = new javax.swing.JRadioButton();
        jrbSize = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        rdbAscending = new javax.swing.JRadioButton();
        rdbDescending = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblItemDetails = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTree = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblLegend = new javax.swing.JTable();
        btnShowAll = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Item Details");

        tbpMain.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel1.setText("Item Code");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setText("Item Name");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel5.setText("Category");

        txtItemCode.setBackground(new java.awt.Color(99, 144, 177));
        txtItemCode.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtItemCode.setText("I00001");
        txtItemCode.setFocusable(false);
        txtItemCode.setRequestFocusEnabled(false);

        txtItemName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNameKeyReleased(evt);
            }
        });

        btnAddConstruction.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        btnAddConstruction.setText("Add Metric");
        btnAddConstruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddConstructionActionPerformed(evt);
            }
        });

        btnAddItem.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnAddItem.setText("ADD ITEM");
        btnAddItem.setEnabled(false);
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jButton8.setText("CLEAR FIELDS");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Newly Added", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), java.awt.Color.black)); // NOI18N

        tblNewly.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Item Name"
            }
        ));
        tblNewly.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblNewly);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel10.setText("Metric");

        cmbConstruction.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cmbConstruction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Radial" }));
        cmbConstruction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbConstructionKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel11.setText("Manufacturer");

        cmbManufacturer.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cmbManufacturer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Good Year" }));
        cmbManufacturer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbManufacturerKeyReleased(evt);
            }
        });

        btnAddManufacturer.setText("Add Manufacturer");
        btnAddManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddManufacturerActionPerformed(evt);
            }
        });

        cmbCategory.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tire", "Tube", "Alloy_Wheel", "Other_Retail" }));
        cmbCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbCategoryKeyReleased(evt);
            }
        });

        btnAddCategory.setText("Add Category");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cmbConstruction, javax.swing.GroupLayout.Alignment.LEADING, 0, 287, Short.MAX_VALUE)
                                    .addComponent(cmbManufacturer, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, 287, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddConstruction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddManufacturer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel))
                            .addComponent(btnAddItem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddManufacturer))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddCategory))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(cmbConstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAddConstruction)))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddItem)
                            .addComponent(btnCancel)
                            .addComponent(jButton8)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        tbpMain.addTab("Add Items", jPanel1);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel12.setText("Search By");

        bgSearch.add(jrbManufacture);
        jrbManufacture.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jrbManufacture.setText("Manufacturer");
        jrbManufacture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jrbManufactureMouseClicked(evt);
            }
        });
        jrbManufacture.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbManufactureItemStateChanged(evt);
            }
        });

        bgSearch.add(jrbItemName);
        jrbItemName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jrbItemName.setText("Item Name");
        jrbItemName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jrbItemNameMouseClicked(evt);
            }
        });
        jrbItemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbItemNameItemStateChanged(evt);
            }
        });

        bgSearch.add(jrbSize);
        jrbSize.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jrbSize.setText("Item ID");
        jrbSize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jrbSizeMouseClicked(evt);
            }
        });
        jrbSize.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbSizeItemStateChanged(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel13.setText("Key Words");

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        btgSort.add(rdbAscending);
        rdbAscending.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        rdbAscending.setText("Ascending");
        rdbAscending.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbAscendingItemStateChanged(evt);
            }
        });

        btgSort.add(rdbDescending);
        rdbDescending.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        rdbDescending.setText("Descending");

        tblItemDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Category", "Manufacturer", "Name", "Metric"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItemDetails.getTableHeader().setReorderingAllowed(false);
        tblItemDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemDetailsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblItemDetails);

        jButton9.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jButton9.setText("EXIT");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jrbSize)
                                .addGap(18, 18, 18)
                                .addComponent(jrbManufacture)
                                .addGap(18, 18, 18)
                                .addComponent(jrbItemName))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rdbAscending)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdbDescending)))
                        .addGap(0, 33, Short.MAX_VALUE))
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jrbSize)
                    .addComponent(jrbManufacture)
                    .addComponent(jrbItemName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbAscending)
                    .addComponent(rdbDescending))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addContainerGap())
        );

        tbpMain.addTab("Update / Delete / Find Items", jPanel3);

        itemTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTreeMouseClicked(evt);
            }
        });
        itemTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                itemTreeValueChanged(evt);
            }
        });
        itemTree.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                itemTreeHierarchyChanged(evt);
            }
        });
        itemTree.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                itemTreePropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(itemTree);

        tblLegend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supply ID", "Row ID", "Date ", "Buying Price", "Selling Price", "Quanitity", "Remaining Quanitity", "Ratio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLegend.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tblLegend);
        if (tblLegend.getColumnModel().getColumnCount() > 0) {
            tblLegend.getColumnModel().getColumn(0).setMinWidth(50);
            tblLegend.getColumnModel().getColumn(0).setMaxWidth(60);
            tblLegend.getColumnModel().getColumn(1).setMinWidth(50);
            tblLegend.getColumnModel().getColumn(1).setMaxWidth(60);
            tblLegend.getColumnModel().getColumn(5).setMinWidth(50);
            tblLegend.getColumnModel().getColumn(5).setMaxWidth(60);
            tblLegend.getColumnModel().getColumn(6).setMinWidth(50);
            tblLegend.getColumnModel().getColumn(6).setMaxWidth(60);
        }

        btnShowAll.setText("Show All");
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE))
                    .addComponent(btnShowAll))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnShowAll)
                .addContainerGap())
        );

        tbpMain.addTab("Item Legend", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpMain)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpMain)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTreeMouseClicked
        itemTreeHierarchyChanged(null);
    }//GEN-LAST:event_itemTreeMouseClicked

    private void itemTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_itemTreeValueChanged
    }//GEN-LAST:event_itemTreeValueChanged

    private void itemTreeHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_itemTreeHierarchyChanged
        if (itemTree.getAnchorSelectionPath() != null) {
            int pathCount = itemTree.getAnchorSelectionPath().getPathCount();
            if (pathCount == 3) {
                Object[] path = itemTree.getAnchorSelectionPath().getPath();
                String itemDescription = path[2].toString();
                String[] splits = itemDescription.split("--");
                long itemID = Long.parseLong(splits[0]);
                List<SupplyOrderDetail> found = stjc.findSupplyOrderDetailsByItemCode(itemID);
                // set the list of items history
                /**
                 * Checks whether there is another set of threads running for
                 * progress bars
                 */
                if (!isProgressing) {
                    dtmItemLegend.setRowCount(0);

                    List<int[]> listRow = new ArrayList<>();

                    for (SupplyOrderDetail detail : found) {
                        dtmItemLegend.addRow(new Object[]{
                                    detail.getSupplyOrder().getSoid(),
                                    detail.getSodid(),
                                    detail.getSupplyOrder().getDateAdded(),
                                    detail.getBuyingPrice(),
                                    detail.getSellingPrice(),
                                    detail.getQty(),
                                    detail.getRemainingQty(),
                                    0
                                });
                        listRow.add(new int[]{dtmItemLegend.getRowCount(), (int) (((double) detail.getRemainingQty() / (double) detail.getQty()) * 100.0)});

                    }



                    for (int i = 0; i < listRow.size(); i++) {
                        int[] is = listRow.get(i);

                        final int rowMend = is[0] - 1;
                        final int toSize = is[1];

                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                int current = 0;
                                while (current <= toSize) {
                                    isProgressing = true;
                                    dtmItemLegend.setValueAt(current, rowMend, 7);
                                    try {
                                        Thread.currentThread().sleep(5);
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(ItemsFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    current++;
                                }
                                isProgressing = false;
                            }
                        }).start();
                    }

                }
            }

    //        System.gc();
        }
    }//GEN-LAST:event_itemTreeHierarchyChanged

    private void itemTreePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_itemTreePropertyChange
    }//GEN-LAST:event_itemTreePropertyChange

    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllActionPerformed
        setTree();
    }//GEN-LAST:event_btnShowAllActionPerformed

    private void txtItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyReleased
        validateAddBtn();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            setComboBoxFocus(cmbManufacturer);
        }
    }//GEN-LAST:event_txtItemNameKeyReleased

    private void btnAddConstructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddConstructionActionPerformed
        new AddMetricFrame(null, true).setVisible(true);
        refreshConstructions();
    }//GEN-LAST:event_btnAddConstructionActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        int conf = JOptionPane.showConfirmDialog(null, "Do you want to add this Item?",
                "Confirm", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        /**
         * Creates an item instance and sets the fields to create. this happens
         * after validation with global validated
         */
        if (isValidated() && conf == 0) {
            try {
                Long itemCode = StripItemCode(txtItemCode.getText());
                String itemName = txtItemName.getText();
                /**
                 * Get Manufacturer from the controller
                 */
                Manufacturer manufacturer = mjc.findManufacturerForName(
                        (String) cmbManufacturer.getSelectedItem());
               
                Metric metric = mc.findMetricForName(
                        (String) cmbConstruction.getSelectedItem());


                /**
                 * set the category of the Item
                 *
                 */
                Category category = (Category) cmbCategory.getSelectedItem();


                Item item = new Item();
                item.setName(itemName);                
                item.setIid(itemCode);
                item.setManufacturer(manufacturer);
                item.setCategory(category);

                ijc.create(item);
                ijc.setChanged();
                ijc.notifyObservers("addItem");
                refreshFields();
                JOptionPane.showMessageDialog(null, item.getName() + " Item was added successfully");
            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, " Error in " + e.getMessage(), "Inserting Error",
//                        JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(ItemsFrame.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
        JDesktopPane dsk = mainFrame.getDsk();
        dsk.remove(this);
//        System.gc();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Do you wan't to Clear All data...", "Clear Confirm...", JOptionPane.OK_CANCEL_OPTION);
        if (showConfirmDialog < 1) {
            clearField();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void cmbConstructionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbConstructionKeyReleased
    }//GEN-LAST:event_cmbConstructionKeyReleased

    private void cmbManufacturerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbManufacturerKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setComboBoxFocus(cmbCategory);
        }
    }//GEN-LAST:event_cmbManufacturerKeyReleased

    private void btnAddManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddManufacturerActionPerformed
        new AddManufactureFrame(null, true).setVisible(true);
        refreshManufacturers();
    }//GEN-LAST:event_btnAddManufacturerActionPerformed

    public JTabbedPane getTbpMain() {
        return tbpMain;
    }

    private void jrbManufactureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jrbManufactureMouseClicked

        searchTblsupplier.searchcell = 1;
    }//GEN-LAST:event_jrbManufactureMouseClicked

    private void jrbItemNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jrbItemNameMouseClicked
        searchTblsupplier.searchcell = 2;
    }//GEN-LAST:event_jrbItemNameMouseClicked

    private void jrbSizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jrbSizeMouseClicked
        searchTblsupplier.searchcell = 0;
    }//GEN-LAST:event_jrbSizeMouseClicked

    private void tblItemDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemDetailsMouseClicked
        if (evt.getClickCount() == 2) {
            int selctedrow = tblItemDetails.getSelectedRow();
            if(selctedrow!=-1){
                String valueAt = tblItemDetails.getValueAt(selctedrow, 0) + "";
                new UpdateItemFrame(null, true, valueAt).setVisible(true);
            }
        }
    }//GEN-LAST:event_tblItemDetailsMouseClicked

    private void jrbSizeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbSizeItemStateChanged
        ItemSelectable item = evt.getItemSelectable();

        if (item == jrbSize) {
            searchTblsupplier.searchcell = 0;
        } else if (item == jrbManufacture) {
            searchTblsupplier.searchcell = 1;
        } else if (item == jrbItemName) {
            searchTblsupplier.searchcell = 2;
        }
    }//GEN-LAST:event_jrbSizeItemStateChanged

    private void jrbManufactureItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbManufactureItemStateChanged
        ItemSelectable item = evt.getItemSelectable();

        if (item == jrbSize) {
            searchTblsupplier.searchcell = 0;
        } else if (item == jrbManufacture) {
            searchTblsupplier.searchcell = 1;
        } else if (item == jrbItemName) {
            searchTblsupplier.searchcell = 2;
        }
    }//GEN-LAST:event_jrbManufactureItemStateChanged

    private void jrbItemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbItemNameItemStateChanged
        ItemSelectable item = evt.getItemSelectable();

        if (item == jrbSize) {
            searchTblsupplier.searchcell = 0;
        } else if (item == jrbManufacture) {
            searchTblsupplier.searchcell = 1;
        } else if (item == jrbItemName) {
            searchTblsupplier.searchcell = 2;
        }
    }//GEN-LAST:event_jrbItemNameItemStateChanged

    private void rdbAscendingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbAscendingItemStateChanged
        ItemSelectable item = evt.getItemSelectable();
        if (item == rdbAscending) {
            searchTblsupplier.acending = true;
        } else if (item == rdbDescending) {
            searchTblsupplier.acending = false;
        }
    }//GEN-LAST:event_rdbAscendingItemStateChanged

    private void cmbCategoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCategoryKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCategoryKeyReleased

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgSearch;
    private javax.swing.ButtonGroup btgSort;
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnAddConstruction;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddManufacturer;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbConstruction;
    private javax.swing.JComboBox cmbManufacturer;
    private javax.swing.JTree itemTree;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton jrbItemName;
    private javax.swing.JRadioButton jrbManufacture;
    private javax.swing.JRadioButton jrbSize;
    private javax.swing.JRadioButton rdbAscending;
    private javax.swing.JRadioButton rdbDescending;
    private javax.swing.JTable tblItemDetails;
    private javax.swing.JTable tblLegend;
    private javax.swing.JTable tblNewly;
    private javax.swing.JTabbedPane tbpMain;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private boolean isValidated() {
        return validated;
    }

    private Long StripItemCode(String itemCode) {
        return Long.parseLong(itemCode.substring(1));
    }

    /**
     * Refresh Fields of the Add Item Tab
     */
    public void refreshFields() {
        // Refresh Item Code
        int itemCount = ijc.getItemCount();
        txtItemCode.setText(formatItemCode(itemCount, 8));

        // Set Manufacturers
        refreshManufacturers();

        // Set Constructions
        refreshConstructions();


        // Set Updation Table
        dtmItemDetails.setRowCount(0);
        dtmNewly.setRowCount(0);
        List<Item> items = ijc.findItemEntities();
        for (Item item : items) {
            dtmItemDetails.addRow(new Object[]{
                        OtherController.formatCode("I", item.getIid(), 8), item.getCategory(),
                        item.getManufacturer().getName(), item.getName()
                    , item.getMetric().getName()});
            dtmNewly.addRow(new Object[]{
                        item.getManufacturer().getName() + " " + item.getName() + " "
                    });

        }

        searchTblsupplier.SearchTblData(tblItemDetails, txtSearch);
    }

    private String formatItemCode(int itemCount, int length) {
        return String.format("I" + "%0" + length + "d", ++itemCount);
    }

    private void refreshConstructions() {
        cmbConstruction.removeAllItems();
        List<Metric> constructions = mc.findMetricEntities();
        for (Metric construction : constructions) {
            cmbConstruction.addItem(construction.getName());
        }
    }

    private void refreshManufacturers() {
        cmbManufacturer.removeAllItems();
        List<Manufacturer> manufacturers = mjc.findManufacturerEntities();
        Collections.sort(manufacturers);
       
        for (Manufacturer manufacturer : manufacturers) {
            cmbManufacturer.addItem(manufacturer.getName());
        }
    }

    /**
     * defines the tree items(nodes)
     *
     */
    public void setTree() {
        modelTree.setRoot(null);
        ArrayList<DefaultMutableTreeNode> nodes1 = new ArrayList<>();
        ArrayList<DefaultMutableTreeNode> nodes2 = new ArrayList<>();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Manufacturers");
        modelTree.setRoot(root);
        List<Manufacturer> manufacturers = mjc.findManufacturerEntities();

        //set the first child of the root as manufacturers
        for (Manufacturer manufacturer : manufacturers) {
            DefaultMutableTreeNode childOfroot = new DefaultMutableTreeNode(manufacturer.getName());
            root.add(childOfroot);
            nodes1.add(childOfroot);
            List<Item> items = manufacturer.getItems();
            //set the second child of the root as item details
            for (Item item : items) {
                DefaultMutableTreeNode childOfChild = new DefaultMutableTreeNode(item.getIid() + "--" + item.getName());
                childOfroot.add(childOfChild);
                nodes2.add(childOfChild);
            }
        }
    }

    /**
     *
     * set the supply details of the given critical item
     *
     * @param id critical item id to set the history
     */
    public void setCriticalStock(Long... id) {
        tbpMain.setSelectedIndex(2);
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Manufacturers");
        modelTree.setRoot(root);
        DefaultMutableTreeNode firstchild = null;
        DefaultMutableTreeNode firstchildOfChild = null;
        List<DefaultMutableTreeNode> childs = new ArrayList<>();
        int i = 0;
        for (long l : id) {
            //System.out.println(i);
            Item item = ijc.findItem(l);
            Manufacturer manufacturer = item.getManufacturer();
            DefaultMutableTreeNode child = new DefaultMutableTreeNode(manufacturer.getName());
            DefaultMutableTreeNode childOfChild = new DefaultMutableTreeNode(item.getIid() + "--" + item.getName());
            if (i == 0) {
                firstchild = child;
                firstchildOfChild = childOfChild;
            }
            i++;
            root.add(child);
            child.add(childOfChild);
            childs.add(child);
        }
        // expand the tree and set the selection
        for (DefaultMutableTreeNode child : childs) {
            TreePath treePath = new TreePath(new Object[]{root, child});
            itemTree.expandPath(treePath);
        }

        TreePath selectedPath = new TreePath(new Object[]{root, firstchild, firstchildOfChild});
        itemTree.setSelectionPath(selectedPath);
//        System.gc();
    }

    private void validateAddBtn() {
        if (txtItemName.getText().isEmpty()) {
            btnAddItem.setEnabled(false);
        } else {
            btnAddItem.setEnabled(true);
        }
    }

    private void clearField() {
        txtItemName.setText("");
    }

    private void setComboBoxFocus(final JComboBox cmbSupName) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                cmbSupName.requestFocus();
            }
        });
    }

    @Override
    public void update(Observable o, Object arg) {
        mainFrame.update(o, arg);
    }
}
