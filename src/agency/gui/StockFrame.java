/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package agency.gui;

import agency.persistance.entity.SupplyOrderDetail;
import agency.persistance.entity.Supplier;
import agency.persistance.entity.SupplyOrder;
import agency.persistance.entity.Item;
import agency.persistance.entity.Manufacturer;
import agency.persistance.controller.ItemJpaController;
import agency.persistance.controller.ManufacturerJpaController;
import agency.persistance.controller.SupplyOrderJpaController;
import agency.persistance.controller.SupplyOrderDetailJpaController;
import agency.persistance.controller.SupplierJpaController;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Date;
import java.sql.Time;
import java.util.*;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import agency.other.ComboSearch;
import agency.other.OtherController;
import agency.other.SwitchComboSearch;
import agency.persistance.factory.ControllerFactory;

/**
 *
 * @author Sandaruwan
 */
public class StockFrame extends javax.swing.JInternalFrame implements Observer {

    private ManufacturerJpaController mjc;
    private ItemJpaController ijc;
    private SupplyOrderDetailJpaController sodjc;
    private SupplierJpaController sjc;
    private SupplyOrderJpaController sojc;
    /**
     * This does the switching in state change event in Item Name and Item Code
     * Combo Boxes
     */
    private boolean comboSwitch = false;
    private boolean comboSwitchSupplier = false;
    /**
     * False this to stop Console proof printing
     */
    private boolean showProofs = false;
    private ImageIcon imgRight;
    private ImageIcon imgWrong;
    // Tablemodel of the Order Table
    private DefaultTableModel dtmOrder;
    // Tablemodel of the Find Table
    private DefaultTableModel dtmSupply;
    private DefaultTableModel dtmSupplyDetail;
    // Total of the order
    private double total = 0;
    private Color clrRed = Color.RED;
    private Color clrBlack = Color.BLACK;
    //MainFrame object Reference
    private MainFrame mainFrame;
    private ComboSearch search;
    private SwitchComboSearch switchComboSearch;

    /**
     * Creates new form StockFrame
     */
    public StockFrame(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;

        search = new ComboSearch();
        switchComboSearch = new SwitchComboSearch();

        // Define Controllers
        mjc = ControllerFactory.getManufacturerJpaController();
        ijc = ControllerFactory.getItemJpaController();
        sodjc = ControllerFactory.getSupplyOrderDetailJpaController();
        sjc = ControllerFactory.getSupplierJpaController();
        sojc = ControllerFactory.getSupplyOrderJpaController();



        OtherController.setIntegerOnly(txtQuantity);
        OtherController.setIntegerOnly(txtBuyingPrice);
        OtherController.setIntegerOnly(txtSellingPrice);
        // Images of Status
        imgRight = new ImageIcon(getClass().getResource("/tireshop/img/right.png"));
        imgWrong = new ImageIcon(getClass().getResource("/tireshop/img/wrong.png"));

        dtmOrder = (DefaultTableModel) tblOrder.getModel();
        dtmSupply = (DefaultTableModel) tblSupply.getModel();
        dtmSupplyDetail = (DefaultTableModel) tblSupplyDetail.getModel();


        refreshFields();
        refreshFindListTable();
        clearFields();
        clearOrder();
        refreshStockID();

        setTablesToUpdate();
        //Sets Key Map
        setMap();

        // Observable for Stock additions
        sojc.addObserver(this);
//        System.gc();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        nameOraddressGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        txtSellingPrice = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        btnAddOrder = new javax.swing.JButton();
        txtBuyingPrice = new javax.swing.JTextField();
        btnClearOrder = new javax.swing.JButton();
        txtBatchID = new javax.swing.JTextField();
        btnAddItem = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        btnDeleteRow = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        cmbManufacturer = new javax.swing.JComboBox();
        cmbItemCode = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        cmbItemName = new javax.swing.JComboBox();
        txtTotal = new javax.swing.JTextField();
        txtStockID = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        lblStat = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmbSupplierID = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbSupplierName = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSupplyDetail = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSupply = new javax.swing.JTable();
        rbtnCompName = new javax.swing.JRadioButton();
        btnshowAll = new javax.swing.JToggleButton();
        rbtnLocation = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        labelerror = new javax.swing.JLabel();
        rbtnName = new javax.swing.JRadioButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Stock Details");
        setToolTipText("Details about Stock");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jPanel6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPanel6KeyReleased(evt);
            }
        });

        txtSellingPrice.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        txtSellingPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSellingPriceFocusGained(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel28.setText("Selling Price");

        btnAddOrder.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        btnAddOrder.setText("ADD ORDER [F12]");
        btnAddOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrderActionPerformed(evt);
            }
        });

        txtBuyingPrice.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        txtBuyingPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuyingPriceFocusGained(evt);
            }
        });

        btnClearOrder.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        btnClearOrder.setText("CLEAR ORDER [F1]");
        btnClearOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOrderActionPerformed(evt);
            }
        });

        txtBatchID.setEditable(false);
        txtBatchID.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        btnAddItem.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnAddItem.setText("ADD STOCK ");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel29.setText("Buying Price");

        btnDeleteRow.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnDeleteRow.setText("DELETE ROW[F9]");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel30.setText("Manufacturer");

        cmbManufacturer.setEditable(true);
        cmbManufacturer.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        cmbManufacturer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Good Year" }));
        cmbManufacturer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbManufacturerItemStateChanged(evt);
            }
        });

        cmbItemCode.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        cmbItemCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "I00001" }));
        cmbItemCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbItemCodeItemStateChanged(evt);
            }
        });
        cmbItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemCodeActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel31.setText("TOTAL");

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel32.setText("Supply ID");

        txtQuantity.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQuantityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantityFocusLost(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel33.setText("Quantity");

        cmbItemName.setEditable(true);
        cmbItemName.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        cmbItemName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tyre 4 Wheelers 205/55 R" }));
        cmbItemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbItemNameItemStateChanged(evt);
            }
        });
        cmbItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        txtStockID.setEditable(false);
        txtStockID.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtStockID.setText("ST0000001");

        tblOrder.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Batch ID", "Quantity", "Buying Price", "Selling Price", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrder.getTableHeader().setReorderingAllowed(false);
        tblOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblOrderKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblOrder);

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel34.setText("Stock Order ID");

        jLabel35.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel35.setText("Item Code");

        jLabel36.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel36.setText("Item Name");

        lblStat.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        txtSubTotal.setEditable(false);
        txtSubTotal.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel1.setText("Sub Total");

        cmbSupplierID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        cmbSupplierID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSupplierIDItemStateChanged(evt);
            }
        });

        jLabel2.setText("Supplier ID");

        jLabel3.setText("Suppler Name");

        cmbSupplierName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSupplierName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSupplierNameItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbManufacturer, 0, 202, Short.MAX_VALUE)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtBuyingPrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addGap(135, 135, 135)))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbItemName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                                        .addComponent(jLabel36)
                                        .addGap(217, 217, 217))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGap(144, 144, 144)
                                        .addComponent(jLabel33))))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtSubTotal))))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35)
                                    .addComponent(cmbItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(txtBatchID, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(lblStat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteRow)))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtStockID, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbSupplierName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(btnClearOrder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddOrder)))
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtStockID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(cmbSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jLabel35)
                    .addComponent(jLabel32)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBatchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel28)
                    .addComponent(jLabel33)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBuyingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAddItem)
                                .addComponent(btnDeleteRow))
                            .addGap(2, 2, 2)))
                    .addComponent(lblStat, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddOrder)
                    .addComponent(btnClearOrder))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Stock", jPanel6);

        jLabel4.setText("Search By ");

        tblSupplyDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supply Batch ID", "Item ID", "Item Name", "Manufacturer", "Quantity", "Remaining Qty", "Buying Price", "Selling Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSupplyDetail.setDragEnabled(false);
        tblSupplyDetail.getTableHeader().setReorderingAllowed(false);
        tblSupplyDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSupplyDetailMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSupplyDetail);

        tblSupply.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Supply Order ID", "Supplier Name", "Time", "Date", "Discount", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSupply.getTableHeader().setReorderingAllowed(false);
        tblSupply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSupplyMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSupply);

        nameOraddressGroup.add(rbtnCompName);
        rbtnCompName.setText("Company Name");
        rbtnCompName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnCompNameMouseClicked(evt);
            }
        });
        rbtnCompName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnCompNameActionPerformed(evt);
            }
        });

        btnshowAll.setText("Show All");
        btnshowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowAllActionPerformed(evt);
            }
        });

        nameOraddressGroup.add(rbtnLocation);
        rbtnLocation.setText("Location");
        rbtnLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnLocationActionPerformed(evt);
            }
        });
        rbtnLocation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rbtnLocationKeyReleased(evt);
            }
        });

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        labelerror.setFont(new java.awt.Font("Droid Sans", 2, 12)); // NOI18N
        labelerror.setForeground(new java.awt.Color(204, 0, 0));

        nameOraddressGroup.add(rbtnName);
        rbtnName.setSelected(true);
        rbtnName.setText("Supplier Name");
        rbtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(30, 30, 30)
                        .addComponent(rbtnCompName)
                        .addGap(26, 26, 26)
                        .addComponent(rbtnLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelerror, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnshowAll)
                        .addGap(88, 88, 88))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(rbtnCompName)
                        .addComponent(btnshowAll)
                        .addComponent(rbtnLocation)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rbtnName))
                    .addComponent(labelerror, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Find | Update | Delete Stock", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void cmbManufacturerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbManufacturerItemStateChanged
        String manuName = (String) cmbManufacturer.getSelectedItem();
        Manufacturer manufacturer = mjc.findManufacturerForName(manuName);
        cmbItemName.removeAllItems();
        cmbItemCode.removeAllItems();
        if (manufacturer != null) {
            List<Item> items = manufacturer.getItems();
            if (items != null && items.size() > 0) {
                for (Item item : items) {
                    cmbItemCode.addItem(OtherController.formatCode("I", item.getIid(), 8));
                    cmbItemName.addItem(item.getName() + " - "
                            + item.getMetric().getName());
                }
                cmbItemName.setSelectedIndex(0);
            }
        }
        switchComboSearch.refreshList(cmbItemName, cmbItemCode);
        refreshBatchID();
    }//GEN-LAST:event_cmbManufacturerItemStateChanged

    private void cmbItemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbItemNameItemStateChanged
        String itemName = (String) cmbItemName.getSelectedItem();
        String manufacturer = (String) cmbManufacturer.getSelectedItem();
        comboSwitch = true;
        if (itemName != null && manufacturer != null) {
            if (showProofs) {
                System.out.println("Item Name " + cmbItemName.getSelectedIndex());
            }
            Integer itemIndex = cmbItemName.getSelectedIndex();

            if (itemIndex != null && itemIndex != -1) {
                try {
                    cmbItemCode.setSelectedIndex(cmbItemName.getSelectedIndex());
                } catch (IllegalArgumentException ex) {
                }
            }
        }
    }//GEN-LAST:event_cmbItemNameItemStateChanged

    private void cmbItemCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbItemCodeItemStateChanged
        String itemCode = (String) cmbItemCode.getSelectedItem();

        if (!comboSwitch) {
            if (itemCode != null) {
                if (showProofs) {
                    System.out.println("Item Code " + cmbItemCode.getSelectedIndex());
                    System.out.println("Item Name " + cmbItemName.getSelectedIndex());
                    System.out.println("itemcode " + stripOutItemCode(itemCode));
                }
                Integer itemIndex = cmbItemName.getSelectedIndex();

                if (itemIndex != -1) {
                    cmbItemName.setSelectedIndex(
                            cmbItemCode.getSelectedIndex());
                    refreshBatchID();
                }
            }
        } else {
            comboSwitch = false;
        }
        validateFields();
    }//GEN-LAST:event_cmbItemCodeItemStateChanged

    private void btnClearOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOrderActionPerformed
        clearFields();
        clearOrder();
        refreshBatchID();
        refreshFields();
        refreshFindListTable();
    }//GEN-LAST:event_btnClearOrderActionPerformed

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased
        calculateSubTotal();
        validateFields();
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        if (validateFields()) {
            dtmOrder.addRow(new Object[]{cmbItemCode.getSelectedItem(),
                        cmbItemCode.getSelectedItem() + " " + cmbItemName.getSelectedItem(),
                        txtBatchID.getText(), txtQuantity.getText(), txtBuyingPrice.getText(),
                        txtSellingPrice.getText(), txtSubTotal.getText()});
        }
        calculateTotal();
        refreshFields();
        cmbManufacturer.requestFocus();
        clearFields();
//        System.gc();
    }//GEN-LAST:event_btnAddItemActionPerformed
    /**
     * This adds the order after confirming with the JOptionPane
     *
     * @exception Exception for persistence errors
     */
    private void btnAddOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrderActionPerformed
        try {
            int conf = JOptionPane.showConfirmDialog(null, "Do you want to add this Stock Supply?",
                    "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (conf == 0) {
                Supplier supplier = sjc.findSupplier((Long) cmbSupplierID.getSelectedItem());
                SupplyOrder supplyOrder = new SupplyOrder();

                List<SupplyOrderDetail> supplyOrderDetails = new ArrayList<>();
                for (int i = 0; i < dtmOrder.getRowCount(); i++) {
                    Long id = stripOutItemCode((String) dtmOrder.getValueAt(i, 0));
                    Item item = ijc.findItem(id);
                    SupplyOrderDetail sod = new SupplyOrderDetail();
                    if (item == null) {
                        return;
                    } else {
                        sod.setItem(item);
                        sod.setBuyingPrice(Double.parseDouble((String) dtmOrder.getValueAt(i, 4)));
                        sod.setQty(Integer.parseInt((String) dtmOrder.getValueAt(i, 3)));
                        sod.setSellingPrice(Double.parseDouble((String) dtmOrder.getValueAt(i, 5)));
                        sod.setRemainingQty(Integer.parseInt((String) dtmOrder.getValueAt(i, 3)));
                        sod.setSupplyOrder(supplyOrder);
                        sod.setSodid(Long.parseLong((String) dtmOrder.getValueAt(i, 2)));
                        supplyOrderDetails.add(sod);
                    }
                }

                Date date = new Date(Calendar.getInstance().getTimeInMillis());
                Time time = new Time(Calendar.getInstance().getTimeInMillis());
                supplyOrder.setLogSession(mainFrame.getLogSession());
                supplyOrder.setSupplier(supplier);
                supplyOrder.setDateAdded(date);
                supplyOrder.setTimeAdded(time);
                supplyOrder.setSupplyOrderDetails(supplyOrderDetails);
                supplyOrder.setDiscount(0);
                calculateTotal();
                supplyOrder.setTotal(total);
                supplyOrder.setSoid(sojc.getSupplyOrderCount() + 1L);

                sojc.create(supplyOrder);

                JOptionPane.showMessageDialog(null, "Successfully Added "
                        + "Stock ", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                sojc.setChanged();
                sojc.notifyObservers("addSupply");
                clearFields();
                clearOrder();
                refreshStockID();
                setTablesToUpdate();
            }
    //        System.gc();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error in adding "
                    + "Stock " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    //        System.gc();
        }
    }//GEN-LAST:event_btnAddOrderActionPerformed

    private void txtQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusGained
        txtQuantity.selectAll();
    }//GEN-LAST:event_txtQuantityFocusGained

    private void txtBuyingPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuyingPriceFocusGained
        txtBuyingPrice.selectAll();
    }//GEN-LAST:event_txtBuyingPriceFocusGained

    private void txtSellingPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSellingPriceFocusGained
        txtSellingPrice.selectAll();
    }//GEN-LAST:event_txtSellingPriceFocusGained

    private void cmbSupplierIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSupplierIDItemStateChanged
        Long supId = (Long) cmbSupplierID.getSelectedItem();
        Integer selSupName = (Integer) cmbSupplierName.getSelectedIndex();
        comboSwitchSupplier = true;

        if (supId != null && selSupName != null && selSupName != -1) {
            cmbSupplierName.setSelectedIndex(cmbSupplierID.getSelectedIndex());
        }

    }//GEN-LAST:event_cmbSupplierIDItemStateChanged

    private void cmbSupplierNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSupplierNameItemStateChanged
        String supName = (String) cmbSupplierName.getSelectedItem();
        Integer selSupID = cmbSupplierID.getSelectedIndex();
        if (!comboSwitchSupplier && supName != null && selSupID != -1) {
            cmbSupplierID.setSelectedIndex(cmbSupplierName.getSelectedIndex());
        }
        comboSwitchSupplier = false;
//        System.gc();
    }//GEN-LAST:event_cmbSupplierNameItemStateChanged

    private void tblSupplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSupplyMouseClicked
        if (evt.getClickCount() == 1) {
            int row = tblSupply.getSelectedRow();
            if (row != -1) {
                dtmSupplyDetail.setRowCount(0);
                List<SupplyOrderDetail> sods = sojc.findSupplyOrdersByLineId((Long) dtmSupply.getValueAt(row, 0));
                if (sods != null) {
                    for (SupplyOrderDetail supplyOrderDetail : sods) {
                        dtmSupplyDetail.addRow(new Object[]{
                                    supplyOrderDetail.getSodid(),
                                    supplyOrderDetail.getItem().getIid(),
                                    supplyOrderDetail.getItem().getName(),
                                    supplyOrderDetail.getItem().getManufacturer().getName(),
                                    supplyOrderDetail.getQty(),
                                    supplyOrderDetail.getRemainingQty(),
                                    supplyOrderDetail.getBuyingPrice(),
                                    supplyOrderDetail.getSellingPrice()
                                });
                    }
                }
            }
        } else if (evt.getClickCount() == 2) {
            int row = tblSupply.getSelectedRow();
            if (row != -1) {
                SupplyOrder so = sojc.findSupplyOrder((Long) dtmSupply.getValueAt(row, 0));
                if (so != null) {
                    Object[] objects = new Object[]{so.getSoid(), so.getDateAdded(), so.getSupplier().getName(), so.getDiscount(), so.getTotal()};
                    new UpdateSupplyOrderFrame(mainFrame, true, objects).setVisible(true);
                }

                refreshFindListTable();
            }
        }
    }//GEN-LAST:event_tblSupplyMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased

        if (!"".equals(txtSearch.getText())) {
            if (rbtnCompName.isSelected()) {
                setTablesToUpdate(SupplyOrderJpaController.compNAME, txtSearch.getText());
            } else if (rbtnLocation.isSelected()) {
                setTablesToUpdate(SupplyOrderJpaController.LOCATION, txtSearch.getText());
            } else {
                setTablesToUpdate(SupplyOrderJpaController.NAME, txtSearch.getText());
            }
        } else {
            dtmSupply.setRowCount(0);
            labelerror.setText("");
        }

    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnshowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowAllActionPerformed

        if (btnshowAll.isSelected()) {
            setTablesToUpdate();
            txtSearch.setEnabled(false);
            rbtnLocation.setEnabled(false);
            rbtnCompName.setEnabled(false);
        } else {
            rbtnCompName.setEnabled(true);
            rbtnLocation.setEnabled(true);
            txtSearch.setEnabled(true);
        }
//        System.gc();
    }//GEN-LAST:event_btnshowAllActionPerformed

    private void rbtnCompNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnCompNameMouseClicked
    }//GEN-LAST:event_rbtnCompNameMouseClicked

    private void rbtnLocationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbtnLocationKeyReleased
    }//GEN-LAST:event_rbtnLocationKeyReleased

    private void rbtnLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnLocationActionPerformed
        txtSearchKeyReleased(null);
    }//GEN-LAST:event_rbtnLocationActionPerformed

    private void rbtnCompNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnCompNameActionPerformed
        txtSearchKeyReleased(null);
    }//GEN-LAST:event_rbtnCompNameActionPerformed

    private void tblSupplyDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSupplyDetailMouseClicked
        if (evt.getClickCount() == 2) {
            int row = tblSupplyDetail.getSelectedRow();
            if (row != -1) {
                SupplyOrderDetail so = sodjc.findSupplyOrderDetail((Long) dtmSupplyDetail.getValueAt(row, 0));
                Object[] objects = new Object[]{so.getSodid(), so.getItem().getIid(),
                    so.getQty(), so.getRemainingQty(), so.getBuyingPrice(), so.getSellingPrice()};
                new UpdateSupplyOrderDetail(mainFrame, true, objects).setVisible(true);
            }
            refreshFindListTable();
        }
    }//GEN-LAST:event_tblSupplyDetailMouseClicked

    private void cmbItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbItemCodeActionPerformed

    private void rbtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnNameActionPerformed
        txtSearchKeyReleased(null);
    }//GEN-LAST:event_rbtnNameActionPerformed

    private void txtQuantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityFocusLost

    private void tblOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblOrderKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F9 || evt.getKeyCode() == KeyEvent.VK_DELETE) {
            btnDeleteRow.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btnAddOrder.doClick();
        }
    }//GEN-LAST:event_tblOrderKeyReleased

    private void jPanel6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel6KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F9 || evt.getKeyCode() == KeyEvent.VK_DELETE) {
            btnDeleteRow.doClick();
        }

        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btnAddOrder.doClick();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel6KeyReleased

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        //System.out.println(evt.getSource().toString());
    }//GEN-LAST:event_formKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddOrder;
    private javax.swing.JButton btnClearOrder;
    private javax.swing.JButton btnDeleteRow;
    private javax.swing.JToggleButton btnshowAll;
    private javax.swing.JComboBox cmbItemCode;
    private javax.swing.JComboBox cmbItemName;
    private javax.swing.JComboBox cmbManufacturer;
    private javax.swing.JComboBox cmbSupplierID;
    private javax.swing.JComboBox cmbSupplierName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelerror;
    private javax.swing.JLabel lblStat;
    private javax.swing.ButtonGroup nameOraddressGroup;
    private javax.swing.JRadioButton rbtnCompName;
    private javax.swing.JRadioButton rbtnLocation;
    private javax.swing.JRadioButton rbtnName;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTable tblSupply;
    private javax.swing.JTable tblSupplyDetail;
    private javax.swing.JTextField txtBatchID;
    private javax.swing.JTextField txtBuyingPrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSellingPrice;
    private javax.swing.JTextField txtStockID;
    private javax.swing.JTextField txtSubTotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    /**
     * Refresh fields <ul><li>Manufacturer Combo Box,</li> <li>Item Name Combo
     * Box and</li> <li>Item Code Combo Box</li> </ul>
     */
    public void refreshFields() {
        cmbManufacturer.removeAllItems();
        cmbItemName.removeAllItems();
        cmbItemCode.removeAllItems();
        //Set Suppliers
        cmbSupplierID.removeAllItems();
        cmbSupplierName.removeAllItems();
        List<Supplier> suppliers = sjc.findSupplierEntities();
        if (suppliers != null) {
            for (Supplier supplier : suppliers) {
                if (supplier.getSuid() != -1L) {
                    cmbSupplierID.addItem(supplier.getSuid());
                    cmbSupplierName.addItem(supplier.getCompName());
                }
            }
        }
        // Set Manufacturers
        List<Manufacturer> manufacturers = mjc.findManufacturerEntities();
        Collections.sort(manufacturers, new Comparator<Manufacturer>() {
            @Override
            public int compare(Manufacturer o1, Manufacturer o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
        for (int i = 0; i < manufacturers.size(); i++) {
            Manufacturer manufacturer = manufacturers.get(i);
            if (manufacturer.getManuid() != -1) {
                if (i == 0) {
                    List<Item> itemsFirstList = manufacturer.getItems();
                    for (Item item : itemsFirstList) {
                        cmbItemName.addItem(item.getName());
                    }
                }
                cmbManufacturer.addItem(manufacturer.getName());
            }
        }
        search.setSearchableCombo(cmbManufacturer, true, "No Such Manufacture");
        switchComboSearch.setSearchableCombo(cmbItemName, cmbItemCode, false, "No Such Item");
//        System.gc();
    }

    public void refreshFindListTable() {
        dtmSupply.setRowCount(0);
        List<SupplyOrder> supplyOrders = sojc.findSupplyOrderEntities();
        for (SupplyOrder supplyOrder : supplyOrders) {
            if (supplyOrder.getSoid() != -1L) {
                dtmSupply.addRow(new Object[]{supplyOrder.getSoid(),
                            supplyOrder.getSupplier().getCompName() + " - " + supplyOrder.getSupplier().getName(),
                            supplyOrder.getTimeAdded(),
                            supplyOrder.getDateAdded(),
                            supplyOrder.getDiscount(),
                            supplyOrder.getTotal()
                        });
            }
        }
//        System.gc();
    }

    /**
     * Retrieves Latest <strong>Supply Order ID</strong> and <strong>Row
     * Count</strong>
     */
    private void refreshBatchID() {
        txtBatchID.setText((1 + sodjc.getSupplyOrderDetailCount() + dtmOrder.getRowCount()) + "");
//        System.gc();
    }

    private Long stripOutItemCode(String itemCode) {
        return Long.parseLong(itemCode.substring(1));
    }

    private void calculateSubTotal() {

        if (!"".equals(txtQuantity.getText()) && !"".equals(txtBuyingPrice.getText())) {
            double qty = Double.parseDouble(txtQuantity.getText());
            double buyingPrice = Double.parseDouble(txtBuyingPrice.getText());
            
            txtSubTotal.setText(OtherController.formatPrice(qty * buyingPrice));
        }
//        System.gc();
    }

    /**
     * Disables fields not to add the Supply Order Detail
     */
    private void disableDetails() {
        lblStat.setIcon(imgWrong);
        btnAddItem.setEnabled(false);

    }

    /**
     * Enables fields not to add the Supply Order Detail
     */
    private void enableDetails() {
        lblStat.setIcon(imgRight);
        btnAddItem.setEnabled(true);
    }

    /**
     * Validates with fields Manufacturer, Item Name, Item Qty, buying price,
     * selling price and quantity
     */
    private boolean validateFields() {
        String manufacturer = (String) cmbManufacturer.getSelectedItem();
        String itemName = (String) cmbItemName.getSelectedItem();
        String itemCode = (String) cmbItemCode.getSelectedItem();
        boolean validNumbers = true;

        try {
            Double.parseDouble(txtBuyingPrice.getText());
            Double.parseDouble(txtSellingPrice.getText());
            Double.parseDouble(txtQuantity.getText());
        } catch (NumberFormatException e) {
            validNumbers = false;
        }
        boolean isNull = (itemName != null) && (manufacturer != null)
                && (itemCode != null);
        if (showProofs) {
            System.out.println(" " + isNull + manufacturer + itemCode + itemName);
        }
        if (isNull && !manufacturer.equals("No Match Found")
                && !itemName.equals("No Match Found")
                && !itemCode.equals("No Match Found")
                && validNumbers) {
            enableDetails();
    //        System.gc();
            return true;
        } else {
            if (showProofs) {
                System.out.println("Disabled " + validNumbers + " " + manufacturer + " " + itemCode + " " + itemName);
            }
            disableDetails();
    //        System.gc();
            return false;
        }
    }

    private void clearFields() {
        txtBuyingPrice.setText("0");
        txtQuantity.setText("0");
        txtSellingPrice.setText("0");
        txtSubTotal.setText("");
//        System.gc();
    }

    private void calculateTotal() {
        total = 0;
        for (int i = 0; i < dtmOrder.getRowCount(); i++) {
            double qty = Double.parseDouble("" + dtmOrder.getValueAt(i, 3));
            double buyingPrice = Double.parseDouble("" + dtmOrder.getValueAt(i, 4));
            total += qty * buyingPrice;
        }
        txtTotal.setText(OtherController.formatPrice(total));
//        System.gc();
    }

    private void clearOrder() {
        dtmOrder.setRowCount(0);
//        System.gc();
    }

    private void refreshStockID() {
        txtStockID.setText(OtherController.formatCode(
                "ST", sjc.getSupplierCount() + 1L, 8));
//        System.gc();
    }

    private void setTablesToUpdate() {

        //sets the list of supply orders
        dtmSupply.setRowCount(0);
        List<SupplyOrder> supplyOrders = sojc.findSupplyOrderEntities();
        for (SupplyOrder supply : supplyOrders) {
            if (supply.getSoid() != -1) {
                dtmSupply.addRow(new Object[]{supply.getSoid(), supply.getSupplier().getName(),
                            supply.getTimeAdded(), supply.getDateAdded(), supply.getDiscount(), supply.getTotal()});
            }
        }
        if (supplyOrders.isEmpty()) {
            labelerror.setText("No Such Supplier in Orders");
        } else {
            labelerror.setText("");
        }
//        System.gc();
    }

    private void setTablesToUpdate(String column, String keyWord) {

        //sets the list of supply orders
        dtmSupply.setRowCount(0);
        List<SupplyOrder> supplyOrders = sojc.findSupplyOrderByColumn(column, keyWord);
        for (SupplyOrder supply : supplyOrders) {
            dtmSupply.addRow(new Object[]{supply.getSoid(), supply.getSupplier().getName(),
                        supply.getTimeAdded(), supply.getDateAdded(), supply.getDiscount(), supply.getTotal()});
        }
        if (supplyOrders.isEmpty()) {
            labelerror.setText("No Such Supplier in Orders");
        } else {
            labelerror.setText("");
        }
//        System.gc();
    }

    private void setMap() {
        //Manufacturer
        cmbManufacturer.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "focusItemName");
        cmbManufacturer.getActionMap().put("focusItemName", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbItemName.requestFocus();
            }
        });
        cmbManufacturer.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        cmbManufacturer.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        cmbManufacturer.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        cmbManufacturer.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        cmbManufacturer.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        cmbManufacturer.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });
        cmbManufacturer.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        cmbManufacturer.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (txtQuantity.isEnabled()) {
                    txtQuantity.requestFocus();
                }
            }
        });
        cmbManufacturer.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusItemName");

        // Item Name
        cmbItemName.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "focusItemCode");
        cmbItemName.getActionMap().put("focusItemCode", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbItemCode.requestFocus();
            }
        });
        cmbItemName.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        cmbItemName.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbManufacturer.requestFocus();
            }
        });
        cmbItemName.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusItemCode");
        cmbItemName.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        cmbItemName.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        cmbItemName.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        cmbItemName.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        cmbItemName.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        cmbItemName.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });

        // Item Code
        cmbItemCode.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "focusBuy");
        cmbItemCode.getActionMap().put("focusBuy", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                txtBuyingPrice.requestFocus();
            }
        });
        cmbItemCode.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        cmbItemCode.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbItemName.requestFocus();
            }
        });
        cmbItemCode.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusBuy");
        cmbItemCode.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        cmbItemCode.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        cmbItemCode.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        cmbItemCode.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        cmbItemCode.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        cmbItemCode.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });

        // Buying Price
        txtBuyingPrice.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "focusQty");
        txtBuyingPrice.getActionMap().put("focusQty", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (txtQuantity.isEnabled()) {
                    txtSellingPrice.requestFocus();
                } else {
                    cmbManufacturer.requestFocus();
                }
            }
        });
        txtBuyingPrice.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        txtBuyingPrice.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbItemCode.requestFocus();
            }
        });
        txtBuyingPrice.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusQty");
        txtBuyingPrice.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        txtBuyingPrice.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        txtBuyingPrice.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        txtBuyingPrice.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        txtBuyingPrice.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        txtBuyingPrice.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });

        // Selling Price
        txtSellingPrice.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "focusQty");
        txtSellingPrice.getActionMap().put("focusQty", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (txtQuantity.isEnabled()) {
                    txtQuantity.requestFocus();
                } else {
                    cmbManufacturer.requestFocus();
                }
            }
        });
        txtSellingPrice.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        txtSellingPrice.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                txtBuyingPrice.requestFocus();
            }
        });
        txtSellingPrice.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusQty");
        txtSellingPrice.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        txtSellingPrice.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        txtSellingPrice.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        txtSellingPrice.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        txtSellingPrice.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        txtSellingPrice.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });

        //Quantity
        txtQuantity.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "focusAdd");
        txtQuantity.getActionMap().put("focusAdd", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnAddItem.isEnabled()) {
                    btnAddItem.requestFocus();
                } else {
                    cmbManufacturer.requestFocus();
                }
            }
        });
        txtQuantity.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        txtQuantity.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                txtBuyingPrice.requestFocus();
            }
        });
        txtQuantity.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusAdd");
        txtQuantity.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        txtQuantity.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        txtQuantity.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        txtQuantity.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        txtQuantity.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        txtQuantity.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });

        // Add Item
        btnAddItem.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "addItem");
        btnAddItem.getActionMap().put("addItem", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddItem.doClick();
                cmbManufacturer.requestFocus();
            }
        });
        btnAddItem.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "goBack");
        btnAddItem.getActionMap().put("goBack", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                txtQuantity.requestFocus();
            }
        });
        btnAddItem.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "focusQty");
        btnAddItem.getActionMap().put("focusQty", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbManufacturer.requestFocus();
            }
        });
        btnAddItem.getInputMap().put(KeyStroke.getKeyStroke("F1"), "clearOrder");
        btnAddItem.getActionMap().put("clearOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnClearOrder.doClick();
            }
        });
        btnAddItem.getInputMap().put(KeyStroke.getKeyStroke("F9"), "deleteRow");
        btnAddItem.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteRow.doClick();
            }
        });
        btnAddItem.getInputMap().put(KeyStroke.getKeyStroke("F12"), "addOrder");
        btnAddItem.getActionMap().put("addOrder", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnAddOrder.doClick();
            }
        });
//        System.gc();
    }

    @Override
    public void update(Observable o, Object arg) {
        mainFrame.update(o, arg);
    }
}
